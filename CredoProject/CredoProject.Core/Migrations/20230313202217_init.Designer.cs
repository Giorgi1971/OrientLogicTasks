// <auto-generated />
using System;
using CredoProject.Core.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CredoProject.Core.Migrations
{
    [DbContext(typeof(CredoDbContext))]
    [Migration("20230313202217_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CredoProject.Core.Db.Entity.AccountEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<int>("CustomerEntityId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("IBAN")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerEntityId");

                    b.ToTable("AccountEntities");
                });

            modelBuilder.Entity("CredoProject.Core.Db.Entity.CardEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountEntityId")
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PIN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountEntityId");

                    b.ToTable("CardEntities");
                });

            modelBuilder.Entity("CredoProject.Core.Db.Entity.CustomerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CustomerEntities");
                });

            modelBuilder.Entity("CredoProject.Core.Db.Entity.OperatorEntity", b =>
                {
                    b.Property<int>("OperatorEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OperatorEntityId"), 1L, 1);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OperatorEntityId");

                    b.ToTable("OperatorEntities");
                });

            modelBuilder.Entity("CredoProject.Core.Db.Entity.TransactionEntity", b =>
                {
                    b.Property<int>("AccountFromId")
                        .HasColumnType("int");

                    b.Property<int>("AccountToId")
                        .HasColumnType("int");

                    b.Property<decimal>("AmountTransaction")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExecutionAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.HasKey("AccountFromId", "AccountToId");

                    b.HasIndex("AccountToId");

                    b.ToTable("TransactionEntities");
                });

            modelBuilder.Entity("CredoProject.Core.Db.Entity.AccountEntity", b =>
                {
                    b.HasOne("CredoProject.Core.Db.Entity.CustomerEntity", "CustomerEntity")
                        .WithMany("AccountEntities")
                        .HasForeignKey("CustomerEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerEntity");
                });

            modelBuilder.Entity("CredoProject.Core.Db.Entity.CardEntity", b =>
                {
                    b.HasOne("CredoProject.Core.Db.Entity.AccountEntity", "AccountEntity")
                        .WithMany("CardEntities")
                        .HasForeignKey("AccountEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountEntity");
                });

            modelBuilder.Entity("CredoProject.Core.Db.Entity.TransactionEntity", b =>
                {
                    b.HasOne("CredoProject.Core.Db.Entity.AccountEntity", "AccountEntityFrom")
                        .WithMany("FromTransactionEntities")
                        .HasForeignKey("AccountFromId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CredoProject.Core.Db.Entity.AccountEntity", "AccountEntityTo")
                        .WithMany("ToTransactionEntities")
                        .HasForeignKey("AccountToId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AccountEntityFrom");

                    b.Navigation("AccountEntityTo");
                });

            modelBuilder.Entity("CredoProject.Core.Db.Entity.AccountEntity", b =>
                {
                    b.Navigation("CardEntities");

                    b.Navigation("FromTransactionEntities");

                    b.Navigation("ToTransactionEntities");
                });

            modelBuilder.Entity("CredoProject.Core.Db.Entity.CustomerEntity", b =>
                {
                    b.Navigation("AccountEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
