// <auto-generated />
using System;
using CredoProject.Core.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CredoProject.Core.Migrations
{
    [DbContext(typeof(CredoDbContext))]
    [Migration("20230318201927_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CredoProject.Core.Db.Entity.AccountEntity", b =>
                {
                    b.Property<int>("AccountEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountEntityId"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<int>("CustomerEntityId")
                        .HasColumnType("int");

                    b.Property<string>("IBAN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountEntityId");

                    b.HasIndex("CustomerEntityId");

                    b.ToTable("AccountEntities");

                    b.HasData(
                        new
                        {
                            AccountEntityId = 1,
                            Amount = 5000m,
                            CreateAt = new DateTime(2023, 3, 19, 0, 19, 27, 795, DateTimeKind.Local).AddTicks(6200),
                            Currency = 0,
                            CustomerEntityId = 2,
                            IBAN = "AL35202111090000000001234567"
                        },
                        new
                        {
                            AccountEntityId = 2,
                            Amount = 5000m,
                            CreateAt = new DateTime(2023, 3, 19, 0, 19, 27, 795, DateTimeKind.Local).AddTicks(6200),
                            Currency = 1,
                            CustomerEntityId = 2,
                            IBAN = "AD1400080001001234567890"
                        },
                        new
                        {
                            AccountEntityId = 3,
                            Amount = 5000m,
                            CreateAt = new DateTime(2023, 3, 19, 0, 19, 27, 795, DateTimeKind.Local).AddTicks(6210),
                            Currency = 2,
                            CustomerEntityId = 2,
                            IBAN = "AT483200000012345864"
                        },
                        new
                        {
                            AccountEntityId = 4,
                            Amount = 4000m,
                            CreateAt = new DateTime(2023, 3, 19, 0, 19, 27, 795, DateTimeKind.Local).AddTicks(6210),
                            Currency = 0,
                            CustomerEntityId = 3,
                            IBAN = "AZ77VTBA00000000001234567890"
                        },
                        new
                        {
                            AccountEntityId = 5,
                            Amount = 3000m,
                            CreateAt = new DateTime(2023, 3, 19, 0, 19, 27, 795, DateTimeKind.Local).AddTicks(6210),
                            Currency = 1,
                            CustomerEntityId = 3,
                            IBAN = "BH02CITI00001077181611"
                        });
                });

            modelBuilder.Entity("CredoProject.Core.Db.Entity.CardEntity", b =>
                {
                    b.Property<int>("CardEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CardEntityId"), 1L, 1);

                    b.Property<int>("AccountEntityId")
                        .HasColumnType("int");

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpiredDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PIN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("CardEntityId");

                    b.HasIndex("AccountEntityId");

                    b.ToTable("CardEntities");

                    b.HasData(
                        new
                        {
                            CardEntityId = 1,
                            AccountEntityId = 1,
                            CVV = "321",
                            CardNumber = "Card01",
                            ExpiredDate = "03-2024",
                            OwnerLastName = "LasName",
                            OwnerName = "Name",
                            PIN = "4444",
                            RegistrationDate = new DateTime(2023, 3, 19, 0, 19, 27, 795, DateTimeKind.Local).AddTicks(6220),
                            Status = 0
                        },
                        new
                        {
                            CardEntityId = 2,
                            AccountEntityId = 2,
                            CVV = "321",
                            CardNumber = "Card02",
                            ExpiredDate = "03-2024",
                            OwnerLastName = "LasName",
                            OwnerName = "Name",
                            PIN = "4444",
                            RegistrationDate = new DateTime(2023, 3, 19, 0, 19, 27, 795, DateTimeKind.Local).AddTicks(6220),
                            Status = 0
                        },
                        new
                        {
                            CardEntityId = 3,
                            AccountEntityId = 1,
                            CVV = "321",
                            CardNumber = "Card03",
                            ExpiredDate = "03-2022",
                            OwnerLastName = "LasName",
                            OwnerName = "Name",
                            PIN = "4444",
                            RegistrationDate = new DateTime(2023, 3, 19, 0, 19, 27, 795, DateTimeKind.Local).AddTicks(6230),
                            Status = 0
                        },
                        new
                        {
                            CardEntityId = 4,
                            AccountEntityId = 3,
                            CVV = "321",
                            CardNumber = "Card04",
                            ExpiredDate = "03-2024",
                            OwnerLastName = "LasName",
                            OwnerName = "Name",
                            PIN = "4444",
                            RegistrationDate = new DateTime(2023, 3, 19, 0, 19, 27, 795, DateTimeKind.Local).AddTicks(6230),
                            Status = 0
                        },
                        new
                        {
                            CardEntityId = 5,
                            AccountEntityId = 4,
                            CVV = "321",
                            CardNumber = "Card05",
                            ExpiredDate = "03-2024",
                            OwnerLastName = "LasName",
                            OwnerName = "Name",
                            PIN = "4444",
                            RegistrationDate = new DateTime(2023, 3, 19, 0, 19, 27, 795, DateTimeKind.Local).AddTicks(6230),
                            Status = 0
                        });
                });

            modelBuilder.Entity("CredoProject.Core.Db.Entity.ExchangeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("currencyFrom")
                        .HasColumnType("int");

                    b.Property<int>("currencyTo")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("rate")
                        .HasColumnType("decimal(18,5)");

                    b.HasKey("Id");

                    b.ToTable("exchangeEntities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            currencyFrom = 0,
                            currencyTo = 0,
                            date = new DateTime(2023, 3, 19, 0, 19, 27, 788, DateTimeKind.Local).AddTicks(7590),
                            rate = 1m
                        },
                        new
                        {
                            Id = 2,
                            currencyFrom = 0,
                            currencyTo = 1,
                            date = new DateTime(2023, 3, 19, 0, 19, 27, 788, DateTimeKind.Local).AddTicks(7620),
                            rate = 0.361m
                        },
                        new
                        {
                            Id = 3,
                            currencyFrom = 0,
                            currencyTo = 2,
                            date = new DateTime(2023, 3, 19, 0, 19, 27, 788, DateTimeKind.Local).AddTicks(7620),
                            rate = 0.3636m
                        },
                        new
                        {
                            Id = 4,
                            currencyFrom = 1,
                            currencyTo = 1,
                            date = new DateTime(2023, 3, 19, 0, 19, 27, 788, DateTimeKind.Local).AddTicks(7630),
                            rate = 1m
                        },
                        new
                        {
                            Id = 5,
                            currencyFrom = 1,
                            currencyTo = 0,
                            date = new DateTime(2023, 3, 19, 0, 19, 27, 788, DateTimeKind.Local).AddTicks(7630),
                            rate = 2.77m
                        },
                        new
                        {
                            Id = 6,
                            currencyFrom = 1,
                            currencyTo = 2,
                            date = new DateTime(2023, 3, 19, 0, 19, 27, 788, DateTimeKind.Local).AddTicks(7630),
                            rate = 0.98m
                        },
                        new
                        {
                            Id = 7,
                            currencyFrom = 2,
                            currencyTo = 2,
                            date = new DateTime(2023, 3, 19, 0, 19, 27, 788, DateTimeKind.Local).AddTicks(7630),
                            rate = 1m
                        },
                        new
                        {
                            Id = 8,
                            currencyFrom = 2,
                            currencyTo = 0,
                            date = new DateTime(2023, 3, 19, 0, 19, 27, 788, DateTimeKind.Local).AddTicks(7630),
                            rate = 2.87m
                        },
                        new
                        {
                            Id = 9,
                            currencyFrom = 2,
                            currencyTo = 1,
                            date = new DateTime(2023, 3, 19, 0, 19, 27, 788, DateTimeKind.Local).AddTicks(7640),
                            rate = 1.0071m
                        });
                });

            modelBuilder.Entity("CredoProject.Core.Db.Entity.OperatorEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OperatorEntities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0e9cb375-7330-434b-828d-0cd0e8941869",
                            Email = "gio2@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEItNVCRQqYROLmsN8SrncVZRD3gr3GEXgCjsh3LenYvTYrdA9HCa1vPFGNNcG5L47Q==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "gio2@gmail.com"
                        });
                });

            modelBuilder.Entity("CredoProject.Core.Db.Entity.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "3eee982c-6bf3-4e2e-be2d-1446a6902462",
                            Name = "api-manager",
                            NormalizedName = "API-MANAGER"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "3635f488-5f30-4df1-9ef7-f9149b5e0ec4",
                            Name = "api-user",
                            NormalizedName = "API-USER"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "fffd850d-2f5d-47b9-a769-92bcfb5d9ba7",
                            Name = "api-operator",
                            NormalizedName = "API-OPERATOR"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "a7547378-55e6-4685-89f2-25cafd1cd324",
                            Name = "api-admin",
                            NormalizedName = "API-ADMIN"
                        });
                });

            modelBuilder.Entity("CredoProject.Core.Db.Entity.SendEmailRequestEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("ToAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SendEmailRequestEntities");
                });

            modelBuilder.Entity("CredoProject.Core.Db.Entity.TransactionEntity", b =>
                {
                    b.Property<int>("AccountFromId")
                        .HasColumnType("int");

                    b.Property<int>("AccountToId")
                        .HasColumnType("int");

                    b.Property<decimal>("AmountTransaction")
                        .HasColumnType("decimal(18,5)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrencyFrom")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyTo")
                        .HasColumnType("int");

                    b.Property<decimal>("CurrentRate")
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExecutionAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("TransType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TransactionEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("AccountFromId", "AccountToId");

                    b.HasIndex("AccountToId");

                    b.ToTable("TransactionEntities");
                });

            modelBuilder.Entity("CredoProject.Core.Db.Entity.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1971, 11, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "13cde0bc-0081-4ded-9d99-80e1550e6186",
                            Email = "gio5@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Gio",
                            LastName = "Mas",
                            LockoutEnabled = false,
                            NormalizedEmail = "GIO5@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENhWYxCxC0g49PmLMo3fAEjhn7vThjLzoKke3HAELY3zvuAXcXdZ3tVxqR2RSqDO3Q==",
                            PersonalNumber = "01030019697",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1978, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "00d51627-326e-4aa0-885f-a41d78021474",
                            Email = "nino@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Nino",
                            LastName = "Chale",
                            LockoutEnabled = false,
                            NormalizedEmail = "NINO@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEINcu6Uw0/rcV2/W7jcC2Bxtgf3QTghkWfaqcPgkP5P/L1s5HwVJnWiFk/4Tjjtkdw==",
                            PersonalNumber = "01015003600",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2017, 12, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "f36bb702-9d9e-4973-82ad-c04eca5c0047",
                            Email = "niko@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Niko",
                            LastName = "Mas",
                            LockoutEnabled = false,
                            NormalizedEmail = "NIKO@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEL6sDE43fGJsuK1lxWVT01HVZAQspUClyVlC64cKhwVm7/ymqe45psFrD654SK8Juw==",
                            PersonalNumber = "01015008765",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CredoProject.Core.Db.Entity.AccountEntity", b =>
                {
                    b.HasOne("CredoProject.Core.Db.Entity.UserEntity", "CustomerEntity")
                        .WithMany("AccountEntities")
                        .HasForeignKey("CustomerEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerEntity");
                });

            modelBuilder.Entity("CredoProject.Core.Db.Entity.CardEntity", b =>
                {
                    b.HasOne("CredoProject.Core.Db.Entity.AccountEntity", "AccountEntity")
                        .WithMany("CardEntities")
                        .HasForeignKey("AccountEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountEntity");
                });

            modelBuilder.Entity("CredoProject.Core.Db.Entity.TransactionEntity", b =>
                {
                    b.HasOne("CredoProject.Core.Db.Entity.AccountEntity", "AccountEntityFrom")
                        .WithMany("FromTransactionEntities")
                        .HasForeignKey("AccountFromId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CredoProject.Core.Db.Entity.AccountEntity", "AccountEntityTo")
                        .WithMany("ToTransactionEntities")
                        .HasForeignKey("AccountToId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AccountEntityFrom");

                    b.Navigation("AccountEntityTo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("CredoProject.Core.Db.Entity.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("CredoProject.Core.Db.Entity.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("CredoProject.Core.Db.Entity.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("CredoProject.Core.Db.Entity.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CredoProject.Core.Db.Entity.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("CredoProject.Core.Db.Entity.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CredoProject.Core.Db.Entity.AccountEntity", b =>
                {
                    b.Navigation("CardEntities");

                    b.Navigation("FromTransactionEntities");

                    b.Navigation("ToTransactionEntities");
                });

            modelBuilder.Entity("CredoProject.Core.Db.Entity.UserEntity", b =>
                {
                    b.Navigation("AccountEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
